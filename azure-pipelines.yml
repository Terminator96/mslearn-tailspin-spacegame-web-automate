trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '5.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: Terraform
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - job: Provision
    displayName: 'Provision Azure App Service'
    pool:
     vmImage: 'ubuntu-20.04'
    variables:
    - group: Release
    steps:
    - script: |
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "storage-test"' | tee backend.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
        echo 'container_name = "storacon"' | tee -a backend.tfvars
        echo 'key = "terraform.tfstate"' | tee -a backend.tfvars

        # Initialize Terraform.
        terraform init -input=false -backend-config="backend.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

        # Get the App Service name for the dev environment.
        WebAppNameDev=$(terraform output --raw appservice_name_dev)
        WebAppNameTest=$(terraform output --raw appservice_name_test)
        WebAppNameStaging=$(terraform output --raw appservice_name_staging)
        # Write the WebAppNameDev variable to the pipeline.
        echo "##vso[task.setvariable variable=WebAppNameDev;isOutput=true]$WebAppNameDev"
        echo "##vso[task.setvariable variable=WebAppNameTest;isOutput=true]$WebAppNameTest"
        echo "##vso[task.setvariable variable=WebAppNameStaging;isOutput=true]$WebAppNameStaging"
      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
- stage: Dev
  displayName: Deploy dev
  dependsOn: Terraform
  condition: succeeded()
  jobs:
  - deployment: Deploy 
    variables:
      WebAppNameDev: $[ stageDependencies.Terraform.Provision.outputs['RunTerraform.WebAppNameDev'] ]
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website dev'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
- stage: Test
  displayName: Deploy test
  dependsOn: Terraform
  condition: succeeded()
  jobs:
  - deployment: Deploy
    variables:
      WebAppNameTest: $[ stageDependencies.Terraform.Provision.outputs['RunTerraform.WebAppNameTest'] ]
    pool:
      vmImage: 'ubuntu-20.04'
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website test'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
- stage: Staging
  displayName: Deploy staging
  dependsOn: Terraform
  condition: succeeded()
  jobs:
  - deployment: Deploy
    variables:
      WebAppNameStaging: $[ stageDependencies.Terraform.Provision.outputs['RunTerraform.WebAppNameStaging'] ]
    pool:
      vmImage: 'ubuntu-20.04'
    environment: staging
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website staging'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'